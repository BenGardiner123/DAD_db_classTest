/*
Deployment script for DAD_class_2020

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DEPLY_TEST_DATA "TRUE"
:setvar DatabaseName "DAD_class_2020"
:setvar DefaultFilePrefix "DAD_class_2020"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key 118b00e4-ab2c-406e-a83e-cc1d06d94e33 is skipped, element [dbo].[Student].[Id] (SqlSimpleColumn) will not be renamed to StudentID';


GO
PRINT N'Rename refactoring operation with key 06f025b4-ff60-400e-9bfd-b0c14f6b3aa7 is skipped, element [dbo].[Enrollment].[Id] (SqlSimpleColumn) will not be renamed to StudentID';


GO
PRINT N'Creating [dbo].[Enrollment]...';


GO
CREATE TABLE [dbo].[Enrollment] (
    [StudentID] INT            NOT NULL,
    [SubjCode]  NVARCHAR (100) NOT NULL,
    [Grade]     NVARCHAR (2)   NULL,
    PRIMARY KEY CLUSTERED ([StudentID] ASC, [SubjCode] ASC)
);


GO
PRINT N'Creating [dbo].[Student]...';


GO
CREATE TABLE [dbo].[Student] (
    [StudentID] INT           NOT NULL,
    [FirstName] NVARCHAR (50) NULL,
    [Surname]   NVARCHAR (50) NULL,
    [NewColumn] NCHAR (10)    NULL,
    PRIMARY KEY CLUSTERED ([StudentID] ASC)
);


GO
PRINT N'Creating [dbo].[MAttAskedForThis]...';


GO
ALTER TABLE [dbo].[Enrollment] WITH NOCHECK
    ADD CONSTRAINT [MAttAskedForThis] FOREIGN KEY ([StudentID]) REFERENCES [dbo].[Student] ([StudentID]);


GO
PRINT N'Creating [dbo].[CK_Grade]...';


GO
ALTER TABLE [dbo].[Enrollment] WITH NOCHECK
    ADD CONSTRAINT [CK_Grade] CHECK (Grade in ('n', 'p', 'c'));


GO
PRINT N'Creating [dbo].[add_student]...';


GO
CREATE PROCEDURE [dbo].[add_student]
	@pstudentid int,
	@pFName NVARchaR(50),
	@pSurname NVARchaR(50)
AS
	insert into Student (StudentID, FirstName, Surname, NewColumn) values
(@pstudentid, @pFName, @pSurname, NULL);

RETURN 0
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '118b00e4-ab2c-406e-a83e-cc1d06d94e33')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('118b00e4-ab2c-406e-a83e-cc1d06d94e33')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '06f025b4-ff60-400e-9bfd-b0c14f6b3aa7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('06f025b4-ff60-400e-9bfd-b0c14f6b3aa7')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF ('$(DEPLY_TEST_DATA)' = 'FALSE')

begin

DELETE FROM Student;

END

BEGIN

insert into Student (StudentID, FirstName, Surname, NewColumn) values
(1, 'Enrique', 'Bermúdez', NULL),
(2, 'Rigoberto', 'Cruz', NULL),
(3, 'Carlos', 'Fonseca', NULL),
(4, 'Augusto', 'Sandino', NULL),
(5, 'Edén', 'Pastora', NULL);

END
GO

GO
